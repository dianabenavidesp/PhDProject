setwd("C:/Users/dben652/workspace/HTL/data/caltech256/data3")
setwd("C:/Users/dben652/workspace/HTL/data/caltech256/data3")
system("cd..")
system("cd...")
system("C:/Users/dben652/workspace/libsvm-3.21/libsvm-3.21/windows")
shell("PATH")
shell("cd C:/Users/dben652/workspace/libsvm-3.21/libsvm-3.21/windows")
shell("dir")
?shell
system("cd C:/Users/dben652/workspace/libsvm-3.21/libsvm-3.21/windows")
system("cmd")
system("cd C:/Users/dben652/workspace/libsvm-3.21/libsvm-3.21/windows")
system("dir")
system("dir", show.output.on.console = TRUE)
system("cmd")
cd C:/Users/dben652/workspace/libsvm-3.21/libsvm-3.21/windows
cd "C:/Users/dben652/workspace/libsvm-3.21/libsvm-3.21/windows
""
cd "C:/Users/dben652/workspace/libsvm-3.21/libsvm-3.21/windows"
system("cd C:/Users/dben652/workspace/libsvm-3.21/libsvm-3.21/windows")
system("cd C:/Users/dben652/workspace/libsvm-3.21/libsvm-3.21/windows")
c<-system("cd C:/Users/dben652/workspace/libsvm-3.21/libsvm-3.21/windows")
c
system("cd C:/Users/dben652/workspace/libsvm-3.21/libsvm-3.21/windows", intern = TRUE)
system("cmd.exe /c date /T", intern=TRUE)
system("cmd.exe cd C:/Users/dben652/workspace/libsvm-3.21/libsvm-3.21/windows", intern = TRUE)
system("cmd.exe dir", intern = TRUE)
setwd("C:/Users/dben652/workspace/HTL/data/caltech256")
sampleToTransfer<-read.csv("251/10percent/noise/data1/sampletransfer251_145_100.csv", stringsAsFactors =FALSE)
sampleToTransfer<-read.csv("251/10percent/noise/data1/samplebase251_145_100.csv", stringsAsFactors =FALSE)
matrixTransfer<-matrix(1,nrow(sampleToTransfer), 1000)
for(i in 1:nrow(sampleToTransfer))
{
firstSplit<-strsplit(sampleToTransfer[i,], split=":")
secondSplit<-strsplit(firstSplit[[1]],split="\t")
for(k in 2:length(secondSplit))
{
third<-as.numeric(unlist(secondSplit[[k]])[1])
matrixTransfer[i,k-1]<-third
}
}
nrow(matrixTransfer)
ncol(matrixTransfer)
indexY<-k
sample<-read.csv(paste("251/10percent/training/data1/sample",251,"_",1,".csv.model", sep=""), stringsAsFactors =FALSE)
matrix<-matrix(1,nrow(sample)-8, 1000)
for(i in 9:nrow(sample))
{
firstSplit<-strsplit(sample[i,], split=":")
secondSplit<-strsplit(firstSplit[[1]],split=" ")
for(j in 2:length(secondSplit))
{
third<-as.numeric(unlist(secondSplit[[j]])[1])
matrix[i-8,j-1]<-third
}
}
nrow(matrix)
NCOL(matrix)
matrix[,1]
indexY<-k
sample<-read.csv(paste("251/10percent/training/data1/sample",251,"_",1,"POS.csv.model", sep=""), stringsAsFactors =FALSE)
matrix<-matrix(1,nrow(sample)-8, 1000)
for(i in 9:nrow(sample))
{
firstSplit<-strsplit(sample[i,], split=":")
secondSplit<-strsplit(firstSplit[[1]],split=" ")
for(j in 2:length(secondSplit))
{
third<-as.numeric(unlist(secondSplit[[j]])[1])
matrix[i-8,j-1]<-third
}
}
nrow(matrix)
sampleToTransfer<-read.csv("251/10percent/noise/data1/samplebase251_145_100POS.csv", stringsAsFactors =FALSE)
sampleToTransfer<-read.csv("251/10percent/noise/data1/samplebase251_145_100POS.txt", stringsAsFactors =FALSE)
matrixTransfer<-matrix(1,nrow(sampleToTransfer), 1000)
for(i in 1:nrow(sampleToTransfer))
{
firstSplit<-strsplit(sampleToTransfer[i,], split=":")
secondSplit<-strsplit(firstSplit[[1]],split="\t")
for(k in 2:length(secondSplit))
{
third<-as.numeric(unlist(secondSplit[[k]])[1])
matrixTransfer[i,k-1]<-third
}
}
nrow(matrixTransfer)
ncol(matrixTransfer)
mean(KL.divergence(matrixTransfer,matrix,k=1)
)
library("caret")
mean(KL.divergence(matrixTransfer,matrix,k=1)
)
library("FNN")
mean(KL.divergence(matrixTransfer,matrix,k=1))
sampleToTransfer<-read.csv("251/10percent/noise/data1/samplebase251_145_100NEG.txt", stringsAsFactors =FALSE)
matrixTransfer<-matrix(1,nrow(sampleToTransfer), 1000)
for(i in 1:nrow(sampleToTransfer))
{
firstSplit<-strsplit(sampleToTransfer[i,], split=":")
secondSplit<-strsplit(firstSplit[[1]],split="\t")
for(k in 2:length(secondSplit))
{
third<-as.numeric(unlist(secondSplit[[k]])[1])
matrixTransfer[i,k-1]<-third
}
}
mean(KL.divergence(matrixTransfer,matrix,k=1))
sampleToTransfer<-read.csv("251/10percent/data1/samplebase251_145POS.txt", stringsAsFactors =FALSE)
matrixTransfer<-matrix(1,nrow(sampleToTransfer), 1000)
for(i in 1:nrow(sampleToTransfer))
{
firstSplit<-strsplit(sampleToTransfer[i,], split=":")
secondSplit<-strsplit(firstSplit[[1]],split="\t")
for(k in 2:length(secondSplit))
{
third<-as.numeric(unlist(secondSplit[[k]])[1])
matrixTransfer[i,k-1]<-third
}
}
mean(KL.divergence(matrixTransfer,matrix,k=1))
indexY<-k
sample<-read.csv(paste("251/10percent/data1/samplebase",251,"_",1,"POS.txt", sep=""), stringsAsFactors =FALSE)
matrix<-matrix(1,nrow(sample)-8, 1000)
for(i in 9:nrow(sample))
{
firstSplit<-strsplit(sample[i,], split=":")
secondSplit<-strsplit(firstSplit[[1]],split=" ")
for(j in 2:length(secondSplit))
{
third<-as.numeric(unlist(secondSplit[[j]])[1])
matrix[i-8,j-1]<-third
}
}
nrow(matrix)
NCOL(matrix)
head(matrix,1)
setwd("C:/Users/dben652/workspace/HTL/data/caltech256")
sample<-read.csv("251/data1/samplebase251_1POS.txt", stringsAsFactors =FALSE)
matrix<-matrix(1,nrow(sample), 1000)
for(i in 1:nrow(sample))
{
firstSplit<-strsplit(sample[i,], split=":")
secondSplit<-strsplit(firstSplit[[1]],split="\t")
for(k in 2:length(secondSplit))
{
third<-as.numeric(unlist(secondSplit[[k]])[1])
matrix[i,k-1]<-third
}
}
mean(KL.divergence(matrixTransfer,matrix,k=1))
mean(KL.divergence(matrix,matrix,k=1))
a<-c(1,2,3,4,5)
b<-c(1,2,3,4,5)
KL.divergence(a,b,k=1)
b<-c(1,2,4,3,5)
KL.divergence(a,b,k=1)
b<-c(1,2,4,6,5)
KL.divergence(a,b,k=1)
b<-c(1,2,4,6,10)
KL.divergence(a,b,k=1)
b<-c(1,2,3,6,10)
KL.divergence(a,b,k=1)
b<-c(1,55,35,6,10)
KL.divergence(a,b,k=1)
b<-c(10,55,35,6,10)
KL.divergence(a,b,k=1)
KL.divergence(a,b,k=2)
b<-c(1,55,35,6,10)
KL.divergence(a,b,k=2)
mean(KL.divergence(a,b,k=2))
install.packages("entropy")
library("entropy")
KL.plugin(matrix, matrixTransfer)
head(matrixTransfer,1)
head(matrix,1)
KL.plugin(matrix, matrixTransfer)
setwd("C:/Users/dben652/workspace/HTL/data/caltech256")
sampleToTransfer<-read.csv("251/data1/sampletransfer251_1.csv", stringsAsFactors =FALSE)
matrixTransfer<-matrix(1,nrow(sampleToTransfer), 1000)
for(i in 1:nrow(sampleToTransfer))
{
firstSplit<-strsplit(sampleToTransfer[i,], split=":")
secondSplit<-strsplit(firstSplit[[1]],split="\t")
for(k in 2:length(secondSplit))
{
third<-as.numeric(unlist(secondSplit[[k]])[1])
matrixTransfer[i,k-1]<-third
}
}
indexY<-1
sample<-read.csv(paste("251/training/data1/sample",indexX,"_",indexY,".csv.model", sep=""), stringsAsFactors =FALSE)
matrix<-matrix(1,nrow(sample)-8, 1000)
for(i in 9:nrow(sample))
{
firstSplit<-strsplit(sample[i,], split=":")
secondSplit<-strsplit(firstSplit[[1]],split=" ")
for(j in 2:length(secondSplit))
{
third<-as.numeric(unlist(secondSplit[[j]])[1])
matrix[i-8,j-1]<-third
}
}
indexY<-1
sample<-read.csv(paste("251/training/data1/sample",251,"_",indexY,".csv.model", sep=""), stringsAsFactors =FALSE)
matrix<-matrix(1,nrow(sample)-8, 1000)
for(i in 9:nrow(sample))
{
firstSplit<-strsplit(sample[i,], split=":")
secondSplit<-strsplit(firstSplit[[1]],split=" ")
for(j in 2:length(secondSplit))
{
third<-as.numeric(unlist(secondSplit[[j]])[1])
matrix[i-8,j-1]<-third
}
}
setwd("C:/Users/dben652/workspace/HTL/data/caltech256")
sampleToTransfer<-read.csv("251/10percent/data1/sampletransfer251_1.csv", stringsAsFactors =FALSE)
matrixTransfer<-matrix(1,nrow(sampleToTransfer), 1000)
for(i in 1:nrow(sampleToTransfer))
{
firstSplit<-strsplit(sampleToTransfer[i,], split=":")
secondSplit<-strsplit(firstSplit[[1]],split="\t")
for(k in 2:length(secondSplit))
{
third<-as.numeric(unlist(secondSplit[[k]])[1])
matrixTransfer[i,k-1]<-third
}
}
indexY<-1
sample<-read.csv(paste("251/10percent/training/data1/sample",251,"_",indexY,".csv.model", sep=""), stringsAsFactors =FALSE)
matrix<-matrix(1,nrow(sample)-8, 1000)
for(i in 9:nrow(sample))
{
firstSplit<-strsplit(sample[i,], split=":")
secondSplit<-strsplit(firstSplit[[1]],split=" ")
for(j in 2:length(secondSplit))
{
third<-as.numeric(unlist(secondSplit[[j]])[1])
matrix[i-8,j-1]<-third
}
}
KL.plugin(matrix, matrixTransfer)
ncol(matrix)
ncol(matrixTransfer)
KL.plugin(matrix[,1], matrixTransfer[,1])
KL.plugin(matrix[1,1], matrixTransfer[1,1])
KL.plugin(matrix[100,1], matrixTransfer[100,1])
KL.plugin(matrix[10,1], matrixTransfer[10,1])
KL.plugin(matrixTransfer[,1], matrix[,1])
class(matrix[,1])
(matrix[,1])
(matrixTransfer[,1])
KL.plugin(matrixTransfer[1,], matrix[1,])
(matrixTransfer[1,])
(matrix[1,])
KL.plugin(matrixTransfer[2,], matrix[2,])
class(matrix[1,])
class(matrixTransfer[1,])
freqs2 = matrix[1,]/sum(matrix[1,])
freqs2
KL.plugin(matrixTransfer[1,] * sum(matrixTransfer[1,]), matrix[1,] * sum(matrixTransfer[1,]))
freqs2 = (matrix[1,] * sum(matrix[1,])/sum(matrix[1,])
)
freqs2
freqs1 = matrix[1,]/sum(matrix[1,])
freqs2 = matrixTransfer[1,]/sum(matrixTransfer[1,])
LR = ifelse(freqs1 > 0, log(freqs1/freqs2), 0)
LR
log(freqs1/freqs2)
LR = ifelse(freqs1 > 0, log(freqs1/freqs2), 0)
LR <- LR[!is.na()]
LR <- LR[!is.na(LR)]
LR
KL = sum(freqs1*LR)
freqs1
LR
LR <- LR[is.na(LR) == 0]
LR
LR = ifelse(freqs1 > 0, log(freqs1/freqs2), 0)
LR <- LR[is.na(LR) == 0]
LR
LR = ifelse(freqs1 > 0, log(freqs1/freqs2), 0)
LR
if(is.na(LR)) { LR = 0}
LR[is.na(LR)] <- 0
LR
KL = sum(freqs1*LR)
KL
LR = ifelse(freqs1 > 0, log(freqs1/freqs1), 0)
LR
KL = sum(freqs1*LR)
KL
for(i in 1:len(matrix[1,]))
{
freqs1 <- matrix[i,]/sum(matrix[i,])
freqs2 <- matrixTransfer[i,]/sum(matrixTransfer[i,])
LR <- ifelse(freqs1 > 0, log(freqs1/freqs2), 0)
LR[is.na(LR)] <- 0
KL[i] <- sum(freqs1*LR)
}
class(matrix[1,])
length(matrix[1,])
for(i in 1:length(matrix[1,]))
{
freqs1 <- matrix[i,]/sum(matrix[i,])
freqs2 <- matrixTransfer[i,]/sum(matrixTransfer[i,])
LR <- ifelse(freqs1 > 0, log(freqs1/freqs2), 0)
LR[is.na(LR)] <- 0
KL[i] <- sum(freqs1*LR)
}
KL<-mean(KL)
for(i in 1:length(matrix[,1]))
{
freqs1 <- matrix[i,]/sum(matrix[i,])
freqs2 <- matrixTransfer[i,]/sum(matrixTransfer[i,])
LR <- ifelse(freqs1 > 0, log(freqs1/freqs2), 0)
LR[is.na(LR)] <- 0
KL[i] <- sum(freqs1*LR)
}
KL<-mean(KL)
KL
warnings()
length(matrix[,1])
matrix[1,]
matrix[49,]
matrix[48,]
matrixTransfer<-matrix
for(i in 1:length(matrix[,1]))
{
freqs1 <- matrix[i,]/sum(matrix[i,])
freqs2 <- matrixTransfer[i,]/sum(matrixTransfer[i,])
LR <- ifelse(freqs1 > 0, log(freqs1/freqs2), 0)
LR[is.na(LR)] <- 0
KL[i] <- sum(freqs1*LR)
}
KL<-mean(KL)
KL
for(i in 1:length(matrix[,1])) { freqs1 <- matrix[i,]/sum(matrix[i,]); freqs2 <- matrixTransfer[i,]/sum(matrixTransfer[i,]); LR <- ifelse(freqs1 > 0, log(freqs1/freqs2), 0); LR[is.na(LR)] <- 0; KL[i] <- sum(freqs1*LR) }; KL<-mean(KL)
for(i in 1:length(matrix[,1])) { freqs1 <- matrix[i,]/sum(matrix[i,]); freqs2 <- matrixTransfer[i,]/sum(matrixTransfer[i,]); LR <- ifelse(freqs1 > 0, log(freqs1/freqs2), 0); LR[is.na(LR)] <- 0; KL[i] <- sum(freqs1*LR) }; KL<-mean(KL); KL
klDiv<-(for(i in 1:length(matrix[,1])) { freqs1 <- matrix[i,]/sum(matrix[i,]); freqs2 <- matrixTransfer[i,]/sum(matrixTransfer[i,]); LR <- ifelse(freqs1 > 0, log(freqs1/freqs2), 0); LR[is.na(LR)] <- 0; KL[i] <- sum(freqs1*LR) }; KL<-mean(KL); KL)
setwd("C:/Users/dben652/workspace/HTL/data/caltech256")
sampleToTransfer<-read.csv("251/10percent/noise/data1/sampletransfer251_145_100.csv", stringsAsFactors =FALSE)
matrixTransfer<-matrix(1,nrow(sampleToTransfer), 1000)
for(i in 1:nrow(sampleToTransfer))
{
firstSplit<-strsplit(sampleToTransfer[i,], split=":")
secondSplit<-strsplit(firstSplit[[1]],split="\t")
for(k in 2:length(secondSplit))
{
third<-as.numeric(unlist(secondSplit[[k]])[1])
matrixTransfer[i,k-1]<-third
}
}
for(i in 1:length(matrix[,1])) { freqs1 <- matrix[i,]/sum(matrix[i,]); freqs2 <- matrixTransfer[i,]/sum(matrixTransfer[i,]); LR <- ifelse(freqs1 > 0, log(freqs1/freqs2), 0); LR[is.na(LR)] <- 0; KL[i] <- sum(freqs1*LR) }; KL<-mean(KL); KL
for(i in 1:length(matrix[,1])) { freqs1 <- matrix[i,]/sum(matrix[i,]); freqs2 <- matrixProblem[i,]/sum(matrixProblem[i,]); LR <- ifelse(freqs1 > 0, log(freqs1/freqs2), 0); LR[is.na(LR)] <- 0; KL[i] <- sum(freqs1*LR) }; KL<-mean(KL); KL
matrixProblem<-matrixTransfer
for(i in 1:length(matrix[,1])) { freqs1 <- matrix[i,]/sum(matrix[i,]); freqs2 <- matrixProblem[i,]/sum(matrixProblem[i,]); LR <- ifelse(freqs1 > 0, log(freqs1/freqs2), 0); LR[is.na(LR)] <- 0; KL[i] <- sum(freqs1*LR) }; KL<-mean(KL); KL
options(warn=-1)
for(i in 1:length(matrix[,1])) { freqs1 <- matrix[i,]/sum(matrix[i,]); freqs2 <- matrixProblem[i,]/sum(matrixProblem[i,]); LR <- ifelse(freqs1 > 0, log(freqs1/freqs2), 0); LR[is.na(LR)] <- 0; KL[i] <- sum(freqs1*LR) }; KL<-mean(KL); KL
options(warn=0)
for(i in 1:length(matrix[,1])) { freqs1 <- matrix[i,]/sum(matrix[i,]); freqs2 <- matrixProblem[i,]/sum(matrixProblem[i,]); LR <- ifelse(freqs1 > 0, log(freqs1/freqs2), 0); LR[is.na(LR)] <- 0; KL[i] <- sum(freqs1*LR) }; KL<-mean(KL); KL
options(warn=-1)
freqs1
options(warn=-1); for(i in 1:length(matrix[,1])) { freqs1 <- matrix[i,]/sum(matrix[i,]); freqs2 <- matrixProblem[i,]/sum(matrixProblem[i,]); LR <- ifelse(freqs1 > 0, log(freqs1/freqs2), 0); LR[is.na(LR)] <- 0; KL[i] <- sum(freqs1*LR) }; KL<-mean(KL); KL
min(len(matrix[1,]),len(matrixProblem[1,]))
min(length(matrix[1,]),length(matrixProblem[1,]))
min(length(matrix[,1]),length(matrixProblem[,1]))
nrow(matrixProblem)
options(warn=-1); for(i in 1:min(length(matrix[,1]),length(matrixProblem[,1]))) { freqs1 <- matrix[i,]/sum(matrix[i,]); freqs2 <- matrixProblem[i,]/sum(matrixProblem[i,]); LR <- ifelse(freqs1 > 0, log(freqs1/freqs2), 0); LR[is.na(LR)] <- 0; KL[i] <- sum(freqs1*LR) }
KL
KL<-NULL
KL
options(warn=-1); for(i in 1:min(length(matrix[,1]),length(matrixProblem[,1]))) { freqs1 <- matrix[i,]/sum(matrix[i,]); freqs2 <- matrixProblem[i,]/sum(matrixProblem[i,]); LR <- ifelse(freqs1 > 0, log(freqs1/freqs2), 0); LR[is.na(LR)] <- 0; KL[i] <- sum(freqs1*LR) }
KL
options(warn=-1); for(i in 1:min(length(matrix[,1]),length(matrixProblem[,1]))) { freqs1 <- matrix[i,]/sum(matrix[i,]); freqs2 <- matrixProblem[i,]/sum(matrixProblem[i,]); LR <- ifelse(freqs1 > 0, log(freqs1/freqs2), 0); LR[is.na(LR)] <- 0; LR }
LR
nrow(matrix)
nrow(matrixProblem)
options(warn=-1); for(i in 1:min(length(matrix[,1]),length(matrixProblem[,1]))) { freqs1 <- matrix[i,]/sum(matrix[i,]); freqs2 <- matrixProblem[i,]/sum(matrixProblem[i,]); LR <- ifelse(freqs1 > 0, log(freqs1/freqs2), 0); LR[is.na(LR)] <- 0; LR }
LR
setwd("C:/Users/dben652/workspace/HTL/src/libsvm)
setwd("C:/Users/dben652/workspace/HTL/src/libsvm")
getwd()
source("KL.R")
a()
options(warn=-1); for(i in 1:min(length(matrix[,1]),length(matrixProblem[,1]))) { freqs1 <- matrix[i,]/sum(matrix[i,]); freqs2 <- matrixProblem[i,]/sum(matrixProblem[i,]); LR <- ifelse(freqs1 > 0, log(freqs1/freqs2), 0); LR[is.na(LR)] <- 0; KL[i] <- sum(freqs1*LR); KL }
KL
KL(matrix, matrixProblem)
source("KL.R")
KL(matrix, matrixProblem)
source("KL.R")
KL(matrix, matrixProblem)
source("KL.R")
KL(matrix, matrixProblem)
source("KL.R")
KL(matrix, matrixProblem)
KL(matrixProblem, matrix)
